// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`nodejs inspects multiple rego files 1`] = `
{
  "annotations": {
    "custom": {
      "failure_msg": "Task '%s' does not contain a bundle reference",
      "short_name": "disallowed_task_reference",
    },
    "description": "Check for existence of a task bundle. Enforcing this rule will
fail the contract if the task is not called from a bundle.",
    "scope": "rule",
    "title": "Task bundle was not used or is not defined",
  },
  "location": {
    "col": 1,
    "file": StringMatching /\\\\/example\\\\\\.rego\\$/,
    "row": 12,
  },
  "path": [
    {
      "type": "var",
      "value": "data",
    },
    {
      "type": "string",
      "value": "example",
    },
    {
      "type": "string",
      "value": "deny",
    },
  ],
}
`;

exports[`nodejs inspects multiple rego files 2`] = `
{
  "annotations": {
    "custom": {
      "short_name": "example2",
    },
    "description": "Second example",
    "scope": "rule",
    "title": "Example 2",
  },
  "location": {
    "col": 1,
    "file": StringMatching /\\\\/example2\\\\\\.rego\\$/,
    "row": 8,
  },
  "path": [
    {
      "type": "var",
      "value": "data",
    },
    {
      "type": "string",
      "value": "example2",
    },
    {
      "type": "string",
      "value": "deny",
    },
  ],
}
`;

exports[`nodejs inspects rego files 1`] = `
[
  {
    "annotations": {
      "custom": {
        "failure_msg": "Task '%s' does not contain a bundle reference",
        "short_name": "disallowed_task_reference",
      },
      "description": "Check for existence of a task bundle. Enforcing this rule will
fail the contract if the task is not called from a bundle.",
      "scope": "rule",
      "title": "Task bundle was not used or is not defined",
    },
    "location": {
      "col": 1,
      "file": "example.rego",
      "row": 12,
    },
    "path": [
      {
        "type": "var",
        "value": "data",
      },
      {
        "type": "string",
        "value": "example",
      },
      {
        "type": "string",
        "value": "deny",
      },
    ],
  },
]
`;

exports[`nodejs inspects rego files read from the filesystem 1`] = `
{
  "annotations": {
    "custom": {
      "failure_msg": "Task '%s' does not contain a bundle reference",
      "short_name": "disallowed_task_reference",
    },
    "description": "Check for existence of a task bundle. Enforcing this rule will
fail the contract if the task is not called from a bundle.",
    "scope": "rule",
    "title": "Task bundle was not used or is not defined",
  },
  "location": {
    "col": 1,
    "file": StringMatching /\\\\/example\\\\\\.rego\\$/,
    "row": 12,
  },
  "path": [
    {
      "type": "var",
      "value": "data",
    },
    {
      "type": "string",
      "value": "example",
    },
    {
      "type": "string",
      "value": "deny",
    },
  ],
}
`;

exports[`nodejs inspects rego files second time 1`] = `
[
  {
    "annotations": {
      "custom": {
        "failure_msg": "Task '%s' does not contain a bundle reference",
        "short_name": "disallowed_task_reference",
      },
      "description": "Check for existence of a task bundle. Enforcing this rule will
fail the contract if the task is not called from a bundle.",
      "scope": "rule",
      "title": "Task bundle was not used or is not defined",
    },
    "location": {
      "col": 1,
      "file": "example.rego",
      "row": 12,
    },
    "path": [
      {
        "type": "var",
        "value": "data",
      },
      {
        "type": "string",
        "value": "example",
      },
      {
        "type": "string",
        "value": "deny",
      },
    ],
  },
]
`;

exports[`nodejs inspects vinyl streams 1`] = `
{
  "annotations": {
    "custom": {
      "failure_msg": "Task '%s' does not contain a bundle reference",
      "short_name": "disallowed_task_reference",
    },
    "description": "Check for existence of a task bundle. Enforcing this rule will
fail the contract if the task is not called from a bundle.",
    "scope": "rule",
    "title": "Task bundle was not used or is not defined",
  },
  "location": {
    "col": 1,
    "file": StringMatching /\\\\/example\\\\\\.rego\\$/,
    "row": 12,
  },
  "path": [
    {
      "type": "var",
      "value": "data",
    },
    {
      "type": "string",
      "value": "example",
    },
    {
      "type": "string",
      "value": "deny",
    },
  ],
}
`;

exports[`nodejs inspects vinyl streams 2`] = `
{
  "annotations": {
    "custom": {
      "short_name": "example2",
    },
    "description": "Second example",
    "scope": "rule",
    "title": "Example 2",
  },
  "location": {
    "col": 1,
    "file": StringMatching /\\\\/example2\\\\\\.rego\\$/,
    "row": 8,
  },
  "path": [
    {
      "type": "var",
      "value": "data",
    },
    {
      "type": "string",
      "value": "example2",
    },
    {
      "type": "string",
      "value": "deny",
    },
  ],
}
`;

exports[`nodejs multiple vinyl files 1`] = `
{
  "annotations": {
    "custom": {
      "failure_msg": "Task '%s' does not contain a bundle reference",
      "short_name": "disallowed_task_reference",
    },
    "description": "Check for existence of a task bundle. Enforcing this rule will
fail the contract if the task is not called from a bundle.",
    "scope": "rule",
    "title": "Task bundle was not used or is not defined",
  },
  "location": {
    "col": 1,
    "file": StringMatching /\\\\/example\\\\\\.rego\\$/,
    "row": 12,
  },
  "path": [
    {
      "type": "var",
      "value": "data",
    },
    {
      "type": "string",
      "value": "example",
    },
    {
      "type": "string",
      "value": "deny",
    },
  ],
}
`;

exports[`nodejs multiple vinyl files 2`] = `
{
  "annotations": {
    "custom": {
      "short_name": "example2",
    },
    "description": "Second example",
    "scope": "rule",
    "title": "Example 2",
  },
  "location": {
    "col": 1,
    "file": StringMatching /\\\\/example2\\\\\\.rego\\$/,
    "row": 8,
  },
  "path": [
    {
      "type": "var",
      "value": "data",
    },
    {
      "type": "string",
      "value": "example2",
    },
    {
      "type": "string",
      "value": "deny",
    },
  ],
}
`;
